import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
### Loading the dataset
train_df = pd.read_csv('Google_Stock_Price_Train.csv')
train_df.info()
test_df = pd.read_csv('Google_Stock_Price_Test.csv')
test_df.info()
#### Choosing column 'open' for predicition
train = train_df.loc[:,["Open"]].values
train.shape
### Feature Scaling
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
train_scaled = scaler.fit_transform(train)
plt.plot(train_scaled)
plt.ylabel("Standardized Values")
plt.xlabel("Time->")
plt.show()
### Create data structure to train model  
Taking reference of past 60 days to predict future stock price  
x_train will have data of 60 days prior to current date and y_train will have price on current date
x_train = []
y_train = []
time = 60
for i in range(60,train_scaled.shape[0]):
    x_train.append(train_scaled[i-60:i,0])
    y_train.append(train_scaled[i,0])
x_train = np.array(x_train)
y_train = np.array(y_train)
x_train.shape,y_train.shape
x_train = np.reshape(x_train,newshape=(x_train.shape[0],x_train.shape[1],1))
x_train.shape
### Build model
from keras.models import Sequential
from keras.layers import Dense, SimpleRNN,Dropout
model = Sequential()

model.add(SimpleRNN(units=50,activation = "tanh", return_sequences = True, input_shape = (x_train.shape[1], 1)))
model.add(Dropout(0.2))

model.add(SimpleRNN(units=50,activation = "tanh", return_sequences = True))
model.add(Dropout(0.2))

model.add(SimpleRNN(units=50,activation = "tanh", return_sequences = True))
model.add(Dropout(0.2))

model.add(SimpleRNN(units=50))
model.add(Dropout(0.2))

model.add(Dense(units=1))

model.compile(optimizer='adam',loss='mse')
model.summary()
model.fit(x_train,y_train,epochs=100,batch_size=30,validation_split=0.05)
### Prepare test dataset
data = pd.concat((train_df['Open'],test_df['Open']),axis=0)
test_input = data.iloc[len(data) - len(test_df) - time : ].values
test_input.shape
test_input = test_input.reshape(-1,1)
test_input.shape
test_scaled = scaler.transform(test_input)
#### Create test data set
x_test = []
for i in range(time,test_scaled.shape[0]):
    x_test.append(test_scaled[i - time: i,0 ])
x_test = np.array(x_test)
x_test.shape
x_test = np.reshape(x_test,newshape=(x_test.shape[0],x_test.shape[1],1))
x_test.shape
y_test = test_df.loc[:,"Open"].values
### Model Prediction
y_pred = model.predict(x_test)
y_pred = scaler.inverse_transform(y_pred)
output = model.evaluate(x=x_test,y=y_test)
plt.plot(y_test, color = 'red', label = 'Real price')
plt.plot(y_pred, color = 'blue', label = 'Predicted price')

plt.title('Google Stock price prediction')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.show()


















Sure! Let's go through the code step by step:

1. The necessary libraries are imported: `pandas` (as `pd`), `matplotlib.pyplot` (as `plt`), and `numpy` (as `np`).

2. The training and test datasets are loaded using `pd.read_csv`. The information about the datasets is printed using `info()`.

3. The column 'Open' from the training dataset is chosen for prediction and stored in the variable `train`.

4. Feature scaling is applied to the `train` data using `MinMaxScaler` from `sklearn.preprocessing`. This step standardizes the values of the data between 0 and 1.

5. A plot is created to show the standardized values of the training data using `plt.plot`.

6. Data structures `x_train` and `y_train` are created to train the model. The loop iterates through the training data and takes the previous 60 days' data as input (`x_train`) and the current day's price as the target (`y_train`).

7. The shapes of `x_train` and `y_train` are printed.

8. `x_train` is reshaped to have the shape (samples, time steps, features) using `np.reshape`.

9. The model is built using `Sequential` from `keras.models`. It consists of four `SimpleRNN` layers with 50 units each, followed by a `Dense` layer with 1 unit. `Dropout` layers are added after each `SimpleRNN` layer to prevent overfitting.

10. The model is compiled with the optimizer set to 'adam' and the loss function set to 'mse' (mean squared error).

11. A summary of the model architecture is printed.

12. The model is trained on `x_train` and `y_train` for 100 epochs, with a batch size of 30 and a validation split of 0.05.

13. The test dataset is prepared by combining the 'Open' column from the training and test datasets. The last 60 days' data is selected as the input for prediction.

14. The test input data is reshaped and scaled using the same scaler as the training data.

15. `x_test` is created by iterating through the test scaled data and appending the previous 60 days' data as input.

16. `x_test` is reshaped to match the model's input shape.

17. The true values of the test set (`y_test`) are extracted from the 'Open' column of the test dataset.

18. The model predicts the stock prices using `x_test` and the predicted prices are inverse-transformed to their original scale.

19. The model's performance is evaluated using `evaluate` on the test set.

20. A plot is created to show the real and predicted prices using `plt.plot`. The real prices are plotted in red, and the predicted prices are plotted in blue.

21. Finally, the plot is displayed using `plt.show()`.

That's a walkthrough of the provided code. Let me know if you have any further questions!